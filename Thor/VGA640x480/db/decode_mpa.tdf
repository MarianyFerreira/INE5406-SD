--lpm_decode CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone II" LPM_DECODES=13 LPM_WIDTH=4 data enable eq
--VERSION_BEGIN 13.0 cbx_cycloneii 2013:06:12:18:03:43:SJ cbx_lpm_add_sub 2013:06:12:18:03:43:SJ cbx_lpm_compare 2013:06:12:18:03:43:SJ cbx_lpm_decode 2013:06:12:18:03:43:SJ cbx_mgl 2013:06:12:18:05:10:SJ cbx_stratix 2013:06:12:18:03:43:SJ cbx_stratixii 2013:06:12:18:03:43:SJ  VERSION_END


-- Copyright (C) 1991-2013 Altera Corporation
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, Altera MegaCore Function License 
--  Agreement, or other applicable license agreement, including, 
--  without limitation, that your use is for the sole purpose of 
--  programming logic devices manufactured by Altera and sold by 
--  Altera or its authorized distributors.  Please refer to the 
--  applicable agreement for further details.



--synthesis_resources = lut 18 
SUBDESIGN decode_mpa
( 
	data[3..0]	:	input;
	enable	:	input;
	eq[12..0]	:	output;
) 
VARIABLE 
	data_wire[3..0]	: WIRE;
	enable_wire	: WIRE;
	eq_node[12..0]	: WIRE;
	eq_wire[15..0]	: WIRE;
	w_anode1084w[1..0]	: WIRE;
	w_anode1093w[3..0]	: WIRE;
	w_anode1110w[3..0]	: WIRE;
	w_anode1120w[3..0]	: WIRE;
	w_anode1130w[3..0]	: WIRE;
	w_anode1140w[3..0]	: WIRE;
	w_anode1150w[3..0]	: WIRE;
	w_anode1160w[3..0]	: WIRE;
	w_anode1170w[3..0]	: WIRE;
	w_anode1182w[1..0]	: WIRE;
	w_anode1189w[3..0]	: WIRE;
	w_anode1200w[3..0]	: WIRE;
	w_anode1210w[3..0]	: WIRE;
	w_anode1220w[3..0]	: WIRE;
	w_anode1230w[3..0]	: WIRE;
	w_anode1240w[3..0]	: WIRE;
	w_anode1250w[3..0]	: WIRE;
	w_anode1260w[3..0]	: WIRE;
	w_data1082w[2..0]	: WIRE;

BEGIN 
	data_wire[] = data[];
	enable_wire = enable;
	eq[] = eq_node[];
	eq_node[12..0] = eq_wire[12..0];
	eq_wire[] = ( ( w_anode1260w[3..3], w_anode1250w[3..3], w_anode1240w[3..3], w_anode1230w[3..3], w_anode1220w[3..3], w_anode1210w[3..3], w_anode1200w[3..3], w_anode1189w[3..3]), ( w_anode1170w[3..3], w_anode1160w[3..3], w_anode1150w[3..3], w_anode1140w[3..3], w_anode1130w[3..3], w_anode1120w[3..3], w_anode1110w[3..3], w_anode1093w[3..3]));
	w_anode1084w[] = ( (w_anode1084w[0..0] & (! data_wire[3..3])), enable_wire);
	w_anode1093w[] = ( (w_anode1093w[2..2] & (! w_data1082w[2..2])), (w_anode1093w[1..1] & (! w_data1082w[1..1])), (w_anode1093w[0..0] & (! w_data1082w[0..0])), w_anode1084w[1..1]);
	w_anode1110w[] = ( (w_anode1110w[2..2] & (! w_data1082w[2..2])), (w_anode1110w[1..1] & (! w_data1082w[1..1])), (w_anode1110w[0..0] & w_data1082w[0..0]), w_anode1084w[1..1]);
	w_anode1120w[] = ( (w_anode1120w[2..2] & (! w_data1082w[2..2])), (w_anode1120w[1..1] & w_data1082w[1..1]), (w_anode1120w[0..0] & (! w_data1082w[0..0])), w_anode1084w[1..1]);
	w_anode1130w[] = ( (w_anode1130w[2..2] & (! w_data1082w[2..2])), (w_anode1130w[1..1] & w_data1082w[1..1]), (w_anode1130w[0..0] & w_data1082w[0..0]), w_anode1084w[1..1]);
	w_anode1140w[] = ( (w_anode1140w[2..2] & w_data1082w[2..2]), (w_anode1140w[1..1] & (! w_data1082w[1..1])), (w_anode1140w[0..0] & (! w_data1082w[0..0])), w_anode1084w[1..1]);
	w_anode1150w[] = ( (w_anode1150w[2..2] & w_data1082w[2..2]), (w_anode1150w[1..1] & (! w_data1082w[1..1])), (w_anode1150w[0..0] & w_data1082w[0..0]), w_anode1084w[1..1]);
	w_anode1160w[] = ( (w_anode1160w[2..2] & w_data1082w[2..2]), (w_anode1160w[1..1] & w_data1082w[1..1]), (w_anode1160w[0..0] & (! w_data1082w[0..0])), w_anode1084w[1..1]);
	w_anode1170w[] = ( (w_anode1170w[2..2] & w_data1082w[2..2]), (w_anode1170w[1..1] & w_data1082w[1..1]), (w_anode1170w[0..0] & w_data1082w[0..0]), w_anode1084w[1..1]);
	w_anode1182w[] = ( (w_anode1182w[0..0] & data_wire[3..3]), enable_wire);
	w_anode1189w[] = ( (w_anode1189w[2..2] & (! w_data1082w[2..2])), (w_anode1189w[1..1] & (! w_data1082w[1..1])), (w_anode1189w[0..0] & (! w_data1082w[0..0])), w_anode1182w[1..1]);
	w_anode1200w[] = ( (w_anode1200w[2..2] & (! w_data1082w[2..2])), (w_anode1200w[1..1] & (! w_data1082w[1..1])), (w_anode1200w[0..0] & w_data1082w[0..0]), w_anode1182w[1..1]);
	w_anode1210w[] = ( (w_anode1210w[2..2] & (! w_data1082w[2..2])), (w_anode1210w[1..1] & w_data1082w[1..1]), (w_anode1210w[0..0] & (! w_data1082w[0..0])), w_anode1182w[1..1]);
	w_anode1220w[] = ( (w_anode1220w[2..2] & (! w_data1082w[2..2])), (w_anode1220w[1..1] & w_data1082w[1..1]), (w_anode1220w[0..0] & w_data1082w[0..0]), w_anode1182w[1..1]);
	w_anode1230w[] = ( (w_anode1230w[2..2] & w_data1082w[2..2]), (w_anode1230w[1..1] & (! w_data1082w[1..1])), (w_anode1230w[0..0] & (! w_data1082w[0..0])), w_anode1182w[1..1]);
	w_anode1240w[] = ( (w_anode1240w[2..2] & w_data1082w[2..2]), (w_anode1240w[1..1] & (! w_data1082w[1..1])), (w_anode1240w[0..0] & w_data1082w[0..0]), w_anode1182w[1..1]);
	w_anode1250w[] = ( (w_anode1250w[2..2] & w_data1082w[2..2]), (w_anode1250w[1..1] & w_data1082w[1..1]), (w_anode1250w[0..0] & (! w_data1082w[0..0])), w_anode1182w[1..1]);
	w_anode1260w[] = ( (w_anode1260w[2..2] & w_data1082w[2..2]), (w_anode1260w[1..1] & w_data1082w[1..1]), (w_anode1260w[0..0] & w_data1082w[0..0]), w_anode1182w[1..1]);
	w_data1082w[2..0] = data_wire[2..0];
END;
--VALID FILE
